// Generated by Haxe 4.2.0
(function ($global) { "use strict";
class Foobar {
	static async(cb,ret,co) {
		cb(ret);
		return null;
	}
	static delay(ms,co) {
		haxe_Timer.delay($bind(co,co.wakeup),ms);
		co.suspend();
	}
}
function Main_main() {
	new pecan_instances_CoFactory_$0(function(_pecan_self) {
		let i = 0;
		let _pecan_temp_2 = 0;
		let _pecan_temp_4 = null;
		let _pecan_temp_6 = null;
		let _pecan_temp_8 = null;
		let _pecan_temp_10 = null;
		_pecan_self.actions = function() {
			switch(_pecan_self.cfgState) {
			case 0:
				i = 0;
				console.log("src/Main.hx:20:","Hello,");
				return 1;
			case 1:
				Foobar.delay(1000,_pecan_self);
				return 2;
			case 2:
				console.log("src/Main.hx:22:","Haxe!");
				return 3;
			case 3:
				_pecan_self.expecting = true;
				_pecan_self.ready = false;
				_pecan_self.cfgState = 4;
				Foobar.async(function(ret) {
					i += 1;
					haxe_Timer.delay(function() {
						ret(1000);
					},3000);
				},function(_arg) {
					_pecan_temp_2 = _arg;
					_pecan_self.wakeupRet();
				},_pecan_self);
				return 4;
			case 4:
				console.log("src/Main.hx:27:",_pecan_temp_2);
				return 5;
			case 5:
				_pecan_self.expecting = true;
				_pecan_self.ready = false;
				_pecan_self.cfgState = 6;
				Foobar.async(function(ret) {
					i += 1;
					haxe_Timer.delay(function() {
						ret({ a : Math.random()});
					},3000);
				},function(_arg) {
					_pecan_temp_4 = _arg;
					_pecan_self.wakeupRet();
				},_pecan_self);
				return 6;
			case 6:
				console.log("src/Main.hx:32:",_pecan_temp_4.a);
				return 7;
			case 7:
				_pecan_self.expecting = true;
				_pecan_self.ready = false;
				_pecan_self.cfgState = 8;
				Foobar.async(function(ret) {
					i += 1;
					haxe_Timer.delay(function() {
						ret({ a : Math.random()});
					},3000);
				},function(_arg) {
					_pecan_temp_6 = _arg;
					_pecan_self.wakeupRet();
				},_pecan_self);
				return 8;
			case 8:
				console.log("src/Main.hx:37:",_pecan_temp_6.a);
				return 9;
			case 9:
				_pecan_self.expecting = true;
				_pecan_self.ready = false;
				_pecan_self.cfgState = 10;
				Foobar.async(function(ret) {
					i += 1;
					haxe_Timer.delay(function() {
						ret({ a : Math.random()});
					},3000);
				},function(_arg) {
					_pecan_temp_8 = _arg;
					_pecan_self.wakeupRet();
				},_pecan_self);
				return 10;
			case 10:
				console.log("src/Main.hx:42:",_pecan_temp_8.a);
				return 11;
			case 11:
				_pecan_self.expecting = true;
				_pecan_self.ready = false;
				_pecan_self.cfgState = 12;
				Foobar.async(function(ret) {
					i += 1;
					haxe_Timer.delay(function() {
						ret({ a : i});
					},3000);
				},function(_arg) {
					_pecan_temp_10 = _arg;
					_pecan_self.wakeupRet();
				},_pecan_self);
				return 12;
			case 12:
				console.log("src/Main.hx:47:",_pecan_temp_10.a);
				return 13;
			case 13:
				_pecan_self.terminated = true;
				_pecan_self.ready = false;
				_pecan_self.onHalt();
				return -1;
			default:
				throw haxe_Exception.thrown("invalid state");
			}
		};
		_pecan_self.labels = new haxe_ds_StringMap();
	}).run();
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
}
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
class pecan_instances_CoFactory_$0 {
	constructor(init) {
		this.init = init;
	}
	run() {
		let _pecan_ret = new pecan_instances_CoInstance_$0();
		this.init(_pecan_ret);
		_pecan_ret.tick();
		return _pecan_ret;
	}
}
class pecan_instances_CoInstance_$0 {
	constructor() {
		this.cfgState = 0;
		this.expecting = false;
		this.yielding = false;
		this.accepting = false;
		this.terminated = false;
		this.ready = true;
		this.onHalt = function() {
		};
	}
	tick() {
		if(!this.ready) {
			return;
		}
		while(this.ready) this.cfgState = this.actions();
	}
	suspend() {
		this.ready = false;
	}
	wakeup() {
		if(this.terminated || this.accepting || this.yielding || this.expecting) {
			throw haxe_Exception.thrown("invalid state - can only wakeup Co in Ready or Suspended state");
		}
		this.ready = true;
		this.tick();
	}
	wakeupRet() {
		if(!this.expecting) {
			throw haxe_Exception.thrown("invalid state - can only return to Co in Expecting state");
		}
		this.expecting = false;
		this.ready = true;
		this.tick();
	}
}
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
{
}
Main_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
